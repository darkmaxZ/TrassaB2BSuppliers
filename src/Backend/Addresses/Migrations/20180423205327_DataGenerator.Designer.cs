// <auto-generated />
using System;
using Addresses.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Addresses.Migrations
{
    [DbContext(typeof(AddressesContext))]
    [Migration("20180423205327_DataGenerator")]
    partial class DataGenerator
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("addresses")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571");

            modelBuilder.Entity("Addresses.Database.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apartment");

                    b.Property<string>("Building");

                    b.Property<string>("Comment");

                    b.Property<int>("DistrictId");

                    b.Property<int>("Entrance");

                    b.Property<int>("Floor");

                    b.Property<string>("HomeOwnership");

                    b.Property<string>("House");

                    b.Property<string>("HouseBlock");

                    b.Property<string>("Intercom");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Ownership");

                    b.Property<string>("Pavilion");

                    b.Property<int>("Postcode");

                    b.Property<int>("StreetId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Addresses.Database.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.Property<string>("Alpha3Code")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Addresses.Database.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocalityId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Addresses.Database.Models.Locality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<int>("LocalityTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LocalityTypeId")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("Localities");
                });

            modelBuilder.Entity("Addresses.Database.Models.LocalityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LocalityTypes");
                });

            modelBuilder.Entity("Addresses.Database.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Addresses.Database.Models.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocalityId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StreetTypeId");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.HasIndex("StreetTypeId")
                        .IsUnique();

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("Addresses.Database.Models.StreetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("StreetTypes");
                });

            modelBuilder.Entity("Addresses.Database.Models.Address", b =>
                {
                    b.HasOne("Addresses.Database.Models.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Addresses.Database.Models.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Addresses.Database.Models.District", b =>
                {
                    b.HasOne("Addresses.Database.Models.Locality", "Locality")
                        .WithMany("Districts")
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Addresses.Database.Models.Locality", b =>
                {
                    b.HasOne("Addresses.Database.Models.Country", "Country")
                        .WithMany("Localities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Addresses.Database.Models.LocalityType", "LocalityType")
                        .WithOne("Locality")
                        .HasForeignKey("Addresses.Database.Models.Locality", "LocalityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Addresses.Database.Models.Region", "Region")
                        .WithMany("Localities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Addresses.Database.Models.Region", b =>
                {
                    b.HasOne("Addresses.Database.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Addresses.Database.Models.Street", b =>
                {
                    b.HasOne("Addresses.Database.Models.Locality", "Locality")
                        .WithMany("Streets")
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Addresses.Database.Models.StreetType", "StreetType")
                        .WithOne("Street")
                        .HasForeignKey("Addresses.Database.Models.Street", "StreetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
